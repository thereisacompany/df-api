<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dfrecvcle.dfsystem.live.mappers.NewsMapper">
    <resultMap id="BaseResultMap" type="com.dfrecvcle.dfsystem.live.entities.News">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="type" jdbcType="TINYINT" property="type" />
        <result column="title" jdbcType="VARCHAR" property="title" />
        <result column="content" jdbcType="VARCHAR" property="content" />
        <result column="visible" jdbcType="TINYINT" property="visible" />
        <result column="visible_at" jdbcType="TIMESTAMP" property="visibleAt" />
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
        <result column="created_by" jdbcType="VARCHAR" property="createdBy" />
    </resultMap>

    <resultMap id="RestData" type="com.dfrecvcle.dfsystem.live.entities.NewsOut">
        <id column="id" jdbcType="BIGINT" property="id" />

    </resultMap>

    <sql id="Base_Column_List">
        id, type, title, content, visible, visible_at, created_by
    </sql>

    <insert id="insertNews" parameterType="com.dfrecvcle.dfsystem.live.entities.News">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO df_news (id, type, title, content, visible, visible_at, created_by)
        VALUES (#{id,jdbcType=BIGINT}, #{type,jdbcType=TINYINT}, #{title,jdbcType=VARCHAR},
        #{content,jdbcType=VARCHAR}, #{visible,jdbcType=TINYINT}, #{visibleAt,jdbcType=TIMESTAMP},
         #{createdBy,jdbcType=VARCHAR});
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.dfrecvcle.dfsystem.live.entities.News">
        update df_news
        <set>
            <if test="type != null">
                type = #{type,jdbcType=TINYINT},
            </if>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="visible != null">
                visible = #{visible,jdbcType=TINYINT},
            </if>
            <if test="visibleAt != null">
                visible_at = #{visibleAt,jdbcType=TIMESTAMP}
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="getListByTypeAndVisible" resultMap="RestData">
        select
        ha.id as id,
        ha.category as type ,
        ha.title,
        ha.content,
        ha.description,
        ha.images,
        ha.publish_date as date,
        hac.name as category,
        hac.id as categoryid,
        YEAR(ha.publish_date) AS year,
        (
        SELECT id
        FROM df_article
        WHERE (publish_date &lt; ha.publish_date OR (publish_date = ha.publish_date AND id &lt; ha.id))
        AND is_delete = 0
        AND is_publish = 1
        <if test="type != null">
            and category = ${type}
        </if>

        ORDER BY publish_date DESC, id DESC
        LIMIT 1
        ) AS previousid,
        (
        SELECT id
        FROM df_article
        WHERE (publish_date > ha.publish_date OR (publish_date = ha.publish_date AND id > ha.id))
        AND is_delete = 0
        AND is_publish = 1
        <if test="type != null">
            and category = ${type}
        </if>

        ORDER BY publish_date ASC, id ASC
        LIMIT 1
        ) AS nextid

        FROM
        df_article ha
        INNER JOIN
        df_article_category hac ON ha.category = hac.id
        where 1=1

        <if test="type != null">
            and ha.category = ${type}
        </if>
        <if test="year != null">
            and YEAR(ha.publish_date) = ${year}
        </if>

        <if test="title != null">
            <bind name="bindTitle" value="'%' + title + '%'"/>
            and ha.title like #{bindTitle}
        </if>
        and ha.is_delete != 1
        and ha.is_publish=1
        order by ha.publish_date desc
        <if test="offset != null and rows != null and rows !=0">
            limit #{offset},#{rows}
        </if>
    </select>

    <select id="getListByTypeANdVisibleBackendCount" resultType="java.lang.Integer">
        select count(1)
        from df_article
        where 1=1
        <if test="type != null">
            and category = ${type}
        </if>
        <if test="year != null">
            and YEAR(publish_date) = ${year}
        </if>
        <if test="visible != null">
            and visible = ${visible}
        </if>

        and is_delete != 1
        <if test="title != null">
            <bind name="bindTitle" value="'%' + title + '%'"/>
            and title like #{bindTitle}
        </if>
    </select>

    <select id="getListByTypeANdVisibleCount" resultType="java.lang.Integer">
        select count(1)
        from df_article
        where 1=1
        <if test="type != null">
            and category = ${type}
        </if>
        <if test="year != null">
            and YEAR(publish_date) = ${year}
        </if>
        <if test="visible != null">
            and visible = ${visible}
        </if>

        and is_delete != 1
        and is_publish=1
        <if test="title != null">
            <bind name="bindTitle" value="'%' + title + '%'"/>
            and title like #{bindTitle}
        </if>
    </select>

    <select id="selectSameTitleCount" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(1)
        from df_article
        where title = #{title}
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="RestData">
        select
            ha.id as id,
            ha.category as type ,
            ha.title,
            ha.content,
            ha.images,
            ha.publish_date as date,
             hac.name as category,
             hac.id as categoryid,
          YEAR(ha.publish_date) AS year,
        (
        SELECT id
        FROM df_article
        WHERE (publish_date &lt; ha.publish_date OR (publish_date = ha.publish_date AND id &lt; ha.id))
        AND is_delete = 0
        AND is_publish = 1
        <if test="type != null">
            and category = ${type}
        </if>

        ORDER BY publish_date DESC, id DESC
        LIMIT 1
    ) AS previousid,
        (
        SELECT id
        FROM df_article
        WHERE (publish_date > ha.publish_date OR (publish_date = ha.publish_date AND id > ha.id))
        AND is_delete = 0
        AND is_publish = 1
        <if test="type != null">
            and category = ${type}
        </if>

        ORDER BY publish_date ASC, id ASC
        LIMIT 1
    ) AS nextid

        FROM
            df_article ha
            INNER JOIN
            df_article_category hac ON ha.category = hac.id
        where 1=1
        and ha.id = #{id,jdbcType=BIGINT}
        and ha.is_delete = 0
        and ha.is_publish=1
        <if test="type != null">
            and ha.category = ${type}
        </if>
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from df_article
        <where>
            id = #{id,jdbcType=BIGINT}
        </where>
    </delete>

</mapper>